<?php
global $semaphore;

include_once 'common.php';

function lib_validate_hex($card) {
  return ($card >= 1) && ($card <= 3);
}

function lib_style_hex($card = 1) {
  switch ($card) {
    case 1:  $c1 = COLOR4; $c2 = COLOR1; $c3 = COLOR2; break;
    case 2:  $c1 = COLOR1; $c2 = COLOR2; $c3 = COLOR4; break;
    default: $c1 = COLOR2; $c2 = COLOR4; $c3 = COLOR1; break;
  }
?>
  .cf0 { fill: #7777; }
  .cf1 { fill: <?= $c1 ?>; }
  .cf2 { fill: <?= $c2 ?>; }
  .cf3 { fill: <?= $c3 ?>; }
  .cs0 { stroke: none }
  .cs1 { stroke: <?= $c1 ?>; }
<?php
}

function lib_defs_hex($card = 1) {
  $x = 322;
  $y = 396;
  $s = 0.3;
  $o = 69;
  $w = $x * $s;
  $h = $y * $s;
?>
  <radialGradient id="g1" cx="50%" cy="50%" r="50%">
    <stop offset="0%" stop-color="#FFF" />
    <stop offset="100%" stop-color="<?= COLOR4 . '7F' ?>" />
  </radialGradient>

  <g id="l" transform="
      rotate(<?= 90-(45/2) ?> <?= CARD_CUT_LINE_W/2 ?> <?= CARD_CUT_LINE_H/2 ?>)
      translate(<?= ((CARD_CUT_LINE_W-$w)/2)+($o*$s) ?>, <?= (CARD_CUT_LINE_H/2)-$h ?>)
      scale(<?= $s ?>, <?= $s ?>)
      ">
    <!-- Bisca Ambigram -->
    <path d="M229.54023,0 C230.15387,16.97148 230.15387,33.94296 229.54023,50.91444 C224.70011,73.933424 210.74647,86.662034 187.68023,89.10027 C155.78843,89.5717 123.89479,89.7291576 92.00023,89.5717 L92.00023,136.7147 L92.00023,136.7147 C118.28647,135.443725 133.77375,121.614797 138.46023,95.22886 C141.00403,117.931043 153.11767,131.602513 174.80023,136.24327 C198.68435,139.423537 208.95707,128.894619 205.62023,104.65746 C203.69099,98.946557 200.16463,94.703687 195.04023,91.92885 C212.30495,95.0563166 223.49859,105.270319 228.62023,122.5718 C234.25983,159.992028 218.77255,180.420032 182.16023,183.8577 C164.23955,182.625382 150.89955,174.139642 142.14023,158.40048 C140.48699,154.135924 139.41335,149.735597 138.92023,145.20044 C139.09319,143.689035 138.63319,142.43126 137.54023,141.429 C137.11335,141.989059 136.95971,142.617946 137.08023,143.31472 C134.28987,165.868874 122.02351,179.226372 100.28023,183.38627 L34.04023,184.32913 L34.04023,184.32913 C24.30571,185.035332 15.41207,188.177885 7.36023,193.75773 C4.49535,196.642882 2.19535,199.942892 0.46023,203.65776 C-0.15341,163.11478 -0.15341,122.5718 0.46023,82.02882 C3.98107,60.4533546 16.09471,47.4107722 36.80023,42.90013 L193.20023,41.95727 L193.20023,41.95727 C215.16431,37.0496837 227.27795,23.0632985 229.54023,0 Z M69.00023,89.5717 L39.56023,89.5717 C27.38219,94.710287 22.01583,104.138887 23.46023,117.8575 C25.13831,127.452043 30.50467,133.580633 39.56023,136.24327 C49.36835,136.7147 59.18199,136.872158 69.00023,136.7147 L69.00023,136.7147 L69.00023,89.5717 L69.00023,89.5717 Z" />
    <path d="M138.92023,145.20044 C138.30659,144.571552 137.69387,143.943608 137.08023,143.31472 C136.95971,142.617946 137.11335,141.989059 137.54023,141.429 C138.63319,142.43126 139.09319,143.689035 138.92023,145.20044 Z" />
    <path d="M183.08023,188.572 C184.14927,205.382251 184.30291,222.353731 183.54023,239.48644 C178.70011,262.505424 164.74647,275.234034 141.68023,277.67227 C117.45571,278.1437 93.22843,278.301158 69.00023,278.1437 C69.00023,262.429052 69.00023,246.715348 69.00023,231.0007 C95.06843,231.158158 121.13571,231.0007 147.20023,230.52927 C169.28943,225.636769 181.24943,211.651327 183.08023,188.572 Z" />
    <path d="M36.80023,231.0007 C39.86659,231.0007 42.93387,231.0007 46.00023,231.0007 C46.00023,246.715348 46.00023,262.429052 46.00023,278.1437 C26.01507,281.367338 19.11507,292.996574 25.30023,313.02952 C28.72355,319.037424 33.78355,322.966322 40.48023,324.81527 C65.31839,325.2867 90.15839,325.444158 115.00023,325.2867 C115.43539,313.692351 120.95539,305.992956 131.56023,302.18663 C142.60023,301.557742 153.64023,301.557742 164.68023,302.18663 C174.10471,303.99315 180.39199,309.492852 183.54023,318.68668 C184.15387,337.857852 184.15387,357.029968 183.54023,376.20114 C181.08659,388.851493 173.57295,395.451513 161.00023,396.0012 C161.15387,379.026891 161.00023,362.055411 160.54023,345.08676 C157.23927,336.877278 151.56563,334.520128 143.52023,338.01531 C142.14023,339.4296 140.76023,340.84389 139.38023,342.25818 C138.68839,349.495573 136.84839,356.409566 133.86023,363.0011 C130.50039,368.261316 125.74767,371.246411 119.60023,371.95827 C92.61387,372.587158 65.62659,372.587158 38.64023,371.95827 C17.07267,368.393316 4.34631,355.664706 0.46023,333.77244 C-0.15341,312.715548 -0.15341,291.657712 0.46023,270.60082 C4.07491,248.949926 16.18763,235.749886 36.80023,231.0007 Z" />
    <path d="M224.48023,231.0007 C243.80943,230.225669 253.16307,239.654269 252.54023,259.2865 C248.26039,273.397343 238.90675,279.525933 224.48023,277.67227 C211.23407,272.87877 205.56043,263.292712 207.46023,248.91504 C210.23587,239.942784 215.90951,233.971652 224.48023,231.0007 Z" id="Path"></path>
  </g>
<?php
}

function _hc($x, $y, $r1, $r2) {
    // BÃ©zier circle constant
    $k = 0.5522847498307936;

    // Outer top arc (from left to right)
    $x0 = $x - $r1; $y0 = $y;          // left start
    $x1 = $x;        $y1 = $y - $r1;   // top middle
    $x2 = $x + $r1;  $y2 = $y;          // right end

    // Control points for outer arc
    $cp1x = $x0; $cp1y = $y - $k*$r1;
    $cp2x = $x - $k*$r1; $cp2y = $y - $r1;

    $cp3x = $x + $k*$r1; $cp3y = $y - $r1;
    $cp4x = $x2; $cp4y = $y - $k*$r1;

    // Inner arc (reverse direction, from right to left)
    $ix0 = $x + $r2; $iy0 = $y;          // right start
    $ix1 = $x;        $iy1 = $y - $r2;   // top middle
    $ix2 = $x - $r2;  $iy2 = $y;          // left end

    // Control points for inner arc
    $icp1x = $ix0; $icp1y = $y - $k*$r2;
    $icp2x = $x + $k*$r2; $icp2y = $y - $r2;

    $icp3x = $x - $k*$r2; $icp3y = $y - $r2;
    $icp4x = $ix2; $icp4y = $y - $k*$r2;

    // Build path string
    $path  = "M$x0,$y0 ";
    $path .= "C$cp1x,$cp1y $cp2x,$cp2y $x,$y1 ";
    $path .= "C$cp3x,$cp3y $cp4x,$cp4y $x2,$y2 ";
    $path .= "L$ix0,$iy0 ";
    $path .= "C$icp1x,$icp1y $icp2x,$icp2y $x,$iy1 ";
    $path .= "C$icp3x,$icp3y $icp4x,$icp4y $ix2,$iy2 ";
    $path .= "Z";

    return $path;
}

function half_1_hex($card = 1) {
  printf('<circle fill="url(#g1)" cx="%s" cy="%s" r="%s" />',
    CARD_CUT_LINE_W/2, CARD_CUT_LINE_H/2, 125.5 );
  half_2_hex($card);
}

function half_2_hex($card = 1) {
  global $cnt;
  if (!isset($cnt)) $cnt = 0;
  $cnt++;

?>
<g
  id="b<?= $cnt ?>"
  stroke-linejoin="round"
  stroke="none"
  fill="none"
  >
    <polygon class="cf1" opacity="1.0" points="78.5 1 299.5 111.5 625.5 1" />
    <polygon class="cf1" opacity="0.9" points="194 432.5 299.5 111.5 625.5 1" />
    <polygon class="cf1" opacity="0.8" points="78.5 1 194 433 299.5 111.5" />

    <polygon class="cf2" opacity="1.0" points="640 217 725.5 1 751 1 751 425" />
    <polygon class="cf2" opacity="0.8" points="640 217 725.5 1 686.5 1 366 321.5" />
    <polygon class="cf2" opacity="0.9" points="640 217 751 425 366 321.5" />

    <polygon class="cf3" opacity="1.0" points="695.5 708 737.5 1051 751 1051 751 469.5" />
    <polygon class="cf3" opacity="0.9" points="695.5 708 737.5 1051 718.5 1051 548 415" />
    <polygon class="cf3" opacity="0.8" points="548 415 695.5 708 751 469.5" />

    <path class="cf1" d="<?= _hc(375, 525, 150, 125) ?>" />
</g>
<use href="#l" fill="none" stroke="#fff" stroke-width="24" stroke-linecap="round" stroke-linejoin="round" />
<use href="#l" class="cf1" />
<?php
}
